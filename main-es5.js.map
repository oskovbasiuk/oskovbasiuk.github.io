{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/game-level/finish-window/finish-window.component.ts","webpack:///src/app/game-level/finish-window/finish-window.component.html","webpack:///src/app/game-level/game-level.component.ts","webpack:///src/app/game-level/game-level.component.html","webpack:///src/app/game-level/game-loads/game-loads.component.ts","webpack:///src/app/game-level/game-loads/game-loads.component.html","webpack:///src/app/game-level/menu/menu.component.ts","webpack:///src/app/game-level/menu/menu.component.html","webpack:///src/app/game-level/scripts/draw.ts","webpack:///src/app/game-level/size-choose/size-choose.component.ts","webpack:///src/app/game-level/size-choose/size-choose.component.html","webpack:///src/app/login-check.guard.ts","webpack:///src/app/login-page/login-page.component.ts","webpack:///src/app/login-page/login-page.component.html","webpack:///src/app/material/material.module.ts","webpack:///src/app/services/game-save-load.service.ts","webpack:///src/app/services/login.service.ts","webpack:///src/configuration/apiUrl.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","redirectTo","pathMatch","component","canActivate","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","FinishWindowComponent","gameSavesService","loginService","startNewLevel","isModalDisplayed","isLoaderDisplayed","ngUnsubscribe$","levelFinishedEmitter","pipe","isAuthorized","saveLevelFinishStats","currentUserId","resultId","subscribe","currentResultId","resultsTable$","getLevelTableStats","size","next","complete","emit","results","slice","resultIndex","find","element","index","_id","logOut","$event","GameLevelComponent","currentMenuId","ESCBtnPressHandler","event","keyCode","isLevelFinished","openCloseMenu","startLevel","initRestartKeyListener","document","addEventListener","isAuthorizedUser$","removeEventListener","time","toFixed","fps","objectives","count","done","menuId","generateLevel","askLevelSize","preloadData","textureId","clearInterval","interval","setInterval","value","finishLevel","moveForward","stopMoving","rotateRight","stopRotating","rotateLeft","moveBackward","GameLoadsComponent","gameSaveLoadService","dateFormat","gameSaves$","getGameSaves","saveId","getGameData","gameSave","MenuComponent","saveGameData","startLevelNewLevel","canvas","canvasPlayWindow","ctx","ctxPlay","collectRadius","currentLevel","currentPlayer","defaultMoveVelocity","defaultRotateVelocity","textureDim","defaultLevelSize","rayCount","FOV","halfFOV","mainColor","secondaryColor","thirdColor","fourthColor","playerColor","collectableColor","canvasWidth","canvasHeight","playerEyesVerticalPosition","playerEyesVerticalChange","fpsLimit","ignoreMask","defaultTextureId","textures","Image","src","collectable","spriteImgs","sprites","zBuffer","Sprite","x","y","spriteType","distance","angle","isVisible","dx","dy","angleDiff","rotateAngle","Math","atan2","PI","abs","convertToRadians","calculateDistance","calculateAngle","fillStyle","fillRect","updateSprite","defaultWallHeight","tileSize","defaultDistance","tan","cos","spriteSize","y0","eyesLevel","x0","columnWidth","i","j","x1","drawImage","renderSprites","sort","s1","s2","forEach","s","render","draw","normilizeAngle","getLevelStats","tilesCount","gameData","y1","x2","y2","sqrt","createGameSave","playerPreload","getPlayerData","levelPreload","getLevelData","levelTime","tasks","map","sprite","timestamp","Date","Ray","level","playerRotateAngle","angleIncrement","columnIndex","isLookingDown","isLookingLeft","yStep","xStep","distanceToWall","wallHitX","wallHitY","wallHitXHorizontal","wallHitYHorizontal","wallHitXVertical","wallHitYVertical","texturePixel","playerAngle","xIntercept","yIntercept","yTemp","ceil","floor","nextXHorizontal","nextYHorizontal","isCollidingHorizontal","xCollision","yCollision","isCollision","tempX","nextXVertical","nextYVertical","isCollidingVertical","horizontalDist","Number","MAX_VALUE","verticalDist","isHittingHorizontal","clearMaskTile","getTile","wallHeight","imageHeight","imageSmoothingEnabled","beginPath","moveTo","lineTo","strokeStyle","stroke","closePath","Player","rays","playerCoords","moveState","rotateState","doesEyesLevelChangingUp","angleIncrementForRays","raysStartAngle","finishPoint","updatePosition","castRays","renderRays","ray","cast","renderWall","moveVelocity","rotateVelocity","isOnFinish","newX","newY","sin","checkSpriteCollision","setAngleAndPosition","filter","length","clearMapBlock","levelArray","playerX","playerY","Level","levelSize","startingPoint","round","random","width","height","levelData","mask","lvlMap","Array","fill","row","lvlStack","push","isAvailableAnyNeighbour","newI","newJ","doesAnyRadiusNeighbourIsPartOfPath","previous","pop","lvlArray","xN","yN","isHavingSpareNeighbour","neighbourI","neighbourJ","exception","changes","anyNeighbourIsPath","startI","endI","startJ","endJ","hitX","hitY","down","left","jTileHit","iTileHit","paintFloorAndCeiling","gameInterval","isGameRunning","timeInterval","audioObj","gameTime","localFPS","animationFrameRepeat","timeSpent","requestAnimationFrame","startGameInterval","clearGameInterval","cancelAnimationFrame","clearTimerInterval","startTimerInterval","loadGame","getElementById","getContext","clearCanvas","clearRect","tick","drawFinishPoint","playerMoveForward","forward","playerMoveBack","back","playerStopMoving","moveStateZero","playerRotateLeft","playerRotateRight","right","playerStopRotating","rotateStateZero","SizeChooseComponent","beginLevel","textureIds","sizes","activeTextureId","LoginCheckGuard","router","state","isInLoginPage","url","includes","isLoggedIn","navigateByUrl","providedIn","LoginPageComponent","fb","activatedRoute","loginForm","group","login","required","password","minLength","passwordRepeat","isOnLoginPage","passwordRepeatField","get","passwordField","validators","setValidators","valueChanges","validator","setErrors","match","logInAsGuest","logIn","error","response","alert","setUserIdToLocalStorage","userId","register","MaterialModule","GameSaveLoadService","http","payload","post","LoginService","localStorage","getItem","setItem","removeItem","URL","environment","production","bootstrapModule","err","console"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { GameLevelComponent } from './game-level/game-level.component';\r\nimport { LoginCheckGuard } from './login-check.guard';\r\nimport { LoginPageComponent } from './login-page/login-page.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'login',\r\n    pathMatch: 'full',\r\n  },\r\n  {\r\n    path: 'game',\r\n    component: GameLevelComponent,\r\n    canActivate: [LoginCheckGuard],\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: LoginPageComponent,\r\n    canActivate: [LoginCheckGuard],\r\n  },\r\n  {\r\n    path: 'register',\r\n    component: LoginPageComponent,\r\n    canActivate: [LoginCheckGuard],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent{\n  title = 'game';\n}\n","<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { CommonModule } from '@angular/common';\nimport { GameLevelComponent } from './game-level/game-level.component';\nimport { RouterModule } from '@angular/router';\nimport { AppRoutingModule } from './app-routing.module';\nimport { LoginPageComponent } from './login-page/login-page.component';\nimport { MenuComponent } from './game-level/menu/menu.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MaterialModule } from './material/material.module';\nimport { FinishWindowComponent } from './game-level/finish-window/finish-window.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { GameLoadsComponent } from './game-level/game-loads/game-loads.component';\nimport { SizeChooseComponent } from './game-level/size-choose/size-choose.component';\nimport { FormsModule } from '@angular/forms';\n@NgModule({\n  declarations: [\n    AppComponent,\n    GameLevelComponent,\n    LoginPageComponent,\n    MenuComponent,\n    FinishWindowComponent,\n    GameLoadsComponent,\n    SizeChooseComponent,\n  ],\n  imports: [\n    BrowserModule,\n    CommonModule,\n    RouterModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    FormsModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Observable, of, Subject } from 'rxjs';\nimport { filter, switchMap, takeUntil } from 'rxjs/operators';\nimport { GameSaveLoadService } from 'src/app/services/game-save-load.service';\nimport { LoginService } from 'src/app/services/login.service';\nimport { getLevelStats } from '../scripts/draw';\n\n@Component({\n  selector: 'app-finish-window',\n  templateUrl: './finish-window.component.html',\n  styleUrls: ['./finish-window.component.scss'],\n})\nexport class FinishWindowComponent implements OnInit, OnDestroy {\n  @Input() levelFinishedEmitter: Observable<void>;\n  @Input() finishTime: string;\n  @Output() startNewLevel = new EventEmitter();\n  public isModalDisplayed = false;\n  public resultsTable$: Observable<any>;\n  public currentResultId: string;\n  public isLoaderDisplayed: boolean = false;\n  private ngUnsubscribe$ = new Subject();\n\n  constructor(private gameSavesService: GameSaveLoadService, private loginService: LoginService) {}\n\n  ngOnInit() {\n    this.levelFinishedEmitter\n      .pipe(\n        takeUntil(this.ngUnsubscribe$),\n        switchMap(() => {\n          this.isModalDisplayed = true;\n          this.isLoaderDisplayed = true;\n          return this.loginService.isAuthorized();\n        }),\n        switchMap((isAuthorized: boolean) => {\n          return isAuthorized\n            ? this.gameSavesService.saveLevelFinishStats(\n                getLevelStats(),\n                this.loginService.currentUserId\n              )\n            : of({ resultId: null });\n        })\n      )\n      .subscribe(({ resultId }) => {\n        this.isLoaderDisplayed = false;\n        this.currentResultId = resultId;\n        this.resultsTable$ = this.gameSavesService.getLevelTableStats(getLevelStats().size);\n      });\n  }\n\n  ngOnDestroy() {\n    this.ngUnsubscribe$.next();\n    this.ngUnsubscribe$.complete();\n  }\n\n  public restartLevel() {\n    this.startNewLevel.emit(true);\n    this.isModalDisplayed = false;\n  }\n\n  public getTop5Results(results): any[] {\n    return results.slice(0, 5);\n  }\n\n  public getExactResultInfo(id: string, results: any[]): any {\n    let resultIndex = 0;\n    return {\n      ...results.find((element, index) => element._id === id && (resultIndex = index + 1)),\n      index: resultIndex,\n    };\n  }\n\n  public logOut(): void {\n    this.loginService.logOut();\n  }\n}\n","<div class=\"modal-background\" *ngIf=\"isModalDisplayed\">\n  <mat-card class=\"modal-itself\" *ngIf=\"!isLoaderDisplayed; else loader\">\n    <span class=\"modal-text time-score\">Your time is: {{ finishTime }} seconds!</span>\n    <span *ngIf=\"!this.currentResultId\" class=\"log-in\">Log in to be placed in leaderboard!</span>\n    <div class=\"score-table\" *ngIf=\"this.resultsTable$ | async as results\">\n      <div\n        *ngFor=\"let result of getTop5Results(results); let i = index\"\n        class=\"modal-text table-item\"\n        [ngClass]=\"{ hightlighted: currentResultId == result._id }\"\n      >\n        <span class=\"index\">{{ i + 1 }}</span>\n        <span class=\"user-login\"> {{ result.user.login }} </span>\n        <span> {{ result.time }}s </span>\n      </div>\n      <ng-container *ngIf=\"getExactResultInfo(currentResultId, results) as result\">\n        <ng-container *ngIf=\"result.index > 5\">\n          <div class=\"modal-text table-item\">\n            <span>⋮</span>\n          </div>\n          <div\n            class=\"modal-text table-item\"\n            [ngClass]=\"{ hightlighted: currentResultId == result._id }\"\n          >\n            <span class=\"index\">{{ result.index }}</span>\n            <span class=\"user-login\"> {{ result.user.login }} </span>\n            <span> {{ result.time }}s </span>\n          </div>\n        </ng-container>\n      </ng-container>\n    </div>\n    <button class=\"modal-button\" mat-raised-button (click)=\"restartLevel()\">Start new level</button>\n  </mat-card>\n  <ng-template #loader> <div class=\"loader\">Loading...</div> </ng-template>\n  <button class=\"modal-button log-out\" color=\"warn\" mat-raised-button (click)=\"logOut()\">\n    Log out\n  </button>\n</div>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { shareReplay } from 'rxjs/operators';\r\nimport { LoginService } from '../services/login.service';\r\nimport {\r\n  startLevel,\r\n  startGameInterval,\r\n  clearGameInterval,\r\n  playerStopMoving,\r\n  playerStopRotating,\r\n  playerMoveBack,\r\n  playerMoveForward,\r\n  playerRotateLeft,\r\n  playerRotateRight,\r\n  gameData,\r\n} from './scripts/draw';\r\n\r\n@Component({\r\n  selector: 'app-game-level',\r\n  templateUrl: './game-level.component.html',\r\n  styleUrls: ['./game-level.component.scss'],\r\n})\r\nexport class GameLevelComponent implements OnInit, OnDestroy {\r\n  constructor(private loginService: LoginService) {}\r\n  public levelFinishedEmitter = new Subject();\r\n  public isLevelFinished: boolean;\r\n  public isAuthorizedUser$;\r\n  public currentMenuId = -1;\r\n  private interval;\r\n  private ESCBtnPressHandler = (event: KeyboardEvent) => {\r\n    if (event.keyCode === 27 && !this.isLevelFinished) {\r\n      this.openCloseMenu();\r\n    }\r\n  };\r\n\r\n  ngOnInit() {\r\n    this.startLevel(true);\r\n    this.initRestartKeyListener();\r\n    document.addEventListener('keydown', this.ESCBtnPressHandler);\r\n    this.isAuthorizedUser$ = this.loginService.isAuthorized().pipe(shareReplay(1));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    document.removeEventListener('keydown', this.ESCBtnPressHandler);\r\n  }\r\n\r\n  public get levelTime() {\r\n    return (gameData.time / 1000).toFixed(1);\r\n  }\r\n\r\n  public get fps() {\r\n    return gameData.fps ^ 0;\r\n  }\r\n\r\n  public get objectivesCount() {\r\n    return gameData.objectives.count;\r\n  }\r\n\r\n  public get objectivesDone() {\r\n    return gameData.objectives.done;\r\n  }\r\n\r\n  public openCloseMenu(menuId: number = null): void {\r\n    if (this.currentMenuId == 2 && menuId != -1) {\r\n      this.generateLevel();\r\n      this.currentMenuId = -1;\r\n    } else if (this.currentMenuId == -1) {\r\n      ++this.currentMenuId;\r\n    } else if (!menuId) {\r\n      --this.currentMenuId;\r\n    } else {\r\n      this.currentMenuId = menuId;\r\n    }\r\n    if (this.currentMenuId == -1) {\r\n      startGameInterval();\r\n    } else {\r\n      clearGameInterval();\r\n    }\r\n  }\r\n\r\n  public initRestartKeyListener(): void {\r\n    document.addEventListener('keydown', (event: KeyboardEvent) => {\r\n      if (event.keyCode === 82 && !this.isLevelFinished) {\r\n        this.startLevel(true);\r\n      }\r\n    });\r\n  }\r\n\r\n  public startLevel(\r\n    askLevelSize = false,\r\n    { preloadData, size } = { preloadData: null, size: null }\r\n  ) {\r\n    if (askLevelSize) {\r\n      this.currentMenuId = 2;\r\n      clearGameInterval();\r\n    } else {\r\n      this.generateLevel({ preloadData, size, textureId: null });\r\n    }\r\n  }\r\n\r\n  public generateLevel(\r\n    { preloadData, size, textureId } = { preloadData: null, size: null, textureId: null }\r\n  ) {\r\n    this.isLevelFinished = false;\r\n    clearInterval(this.interval);\r\n    startLevel(preloadData, size, textureId);\r\n    this.interval = setInterval(() => {\r\n      if (gameData.isLevelFinished.value) {\r\n        clearInterval(this.interval);\r\n        this.finishLevel();\r\n        this.levelFinishedEmitter.next();\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  public finishLevel(): void {\r\n    clearGameInterval();\r\n    this.isLevelFinished = true;\r\n  }\r\n\r\n  public moveForward() {\r\n    playerMoveForward();\r\n  }\r\n\r\n  public moveBackward() {\r\n    playerMoveBack();\r\n  }\r\n\r\n  public rotateLeft() {\r\n    playerRotateLeft();\r\n  }\r\n\r\n  public rotateRight() {\r\n    playerRotateRight();\r\n  }\r\n\r\n  public stopRotating() {\r\n    playerStopRotating();\r\n  }\r\n\r\n  public stopMoving() {\r\n    playerStopMoving();\r\n  }\r\n}\r\n","<canvas id=\"canvas\"></canvas>\r\n<canvas id=\"canvasPlayWindow\"></canvas>\r\n\r\n<div class=\"buttons-layer\">\r\n  <button\r\n    class=\"open-menu-button\"\r\n    color=\"primary\"\r\n    mat-fab\r\n    aria-label=\"Example icon button with a menu icon\"\r\n    (click)=\"openCloseMenu()\"\r\n  >\r\n    <mat-icon>menu</mat-icon>\r\n  </button>\r\n  <div class=\"move-buttons\">\r\n    <div class=\"button-pair-wrapper\">\r\n      <button\r\n        mat-flat-button\r\n        class=\"control-button\"\r\n        id=\"btn-top\"\r\n        (touchstart)=\"moveForward()\"\r\n        (touchend)=\"stopMoving()\"\r\n      ></button>\r\n      <button\r\n        mat-flat-button\r\n        class=\"control-button\"\r\n        id=\"btn-right\"\r\n        (touchstart)=\"rotateRight()\"\r\n        (touchend)=\"stopRotating()\"\r\n      ></button>\r\n    </div>\r\n    <div class=\"button-pair-wrapper\">\r\n      <button\r\n        mat-flat-button\r\n        class=\"control-button\"\r\n        id=\"btn-left\"\r\n        (touchstart)=\"rotateLeft()\"\r\n        (touchend)=\"stopRotating()\"\r\n      ></button>\r\n      <button\r\n        mat-flat-button\r\n        class=\"control-button\"\r\n        id=\"btn-bottom\"\r\n        (touchstart)=\"moveBackward()\"\r\n        (touchend)=\"stopMoving()\"\r\n      ></button>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"timer\">{{ levelTime }}</div>\r\n<div class=\"fps\">{{ fps }} FPS</div>\r\n\r\n<div class=\"objectives\">\r\n  <ng-container>{{ objectivesDone }} of {{ objectivesCount }} keys found. </ng-container>\r\n  <ng-container *ngIf=\"objectivesDone === objectivesCount\"> Exit is clear! </ng-container>\r\n</div>\r\n\r\n<app-menu\r\n  (openCloseMenu)=\"openCloseMenu($event)\"\r\n  (startLevel)=\"startLevel($event)\"\r\n  *ngIf=\"currentMenuId == 0\"\r\n  [isAuthorizedUser]=\"isAuthorizedUser$ | async\"\r\n></app-menu>\r\n<app-game-loads\r\n  *ngIf=\"currentMenuId == 1\"\r\n  (openCloseMenu)=\"openCloseMenu($event)\"\r\n  (startLevel)=\"startLevel(null, $event)\"\r\n>\r\n</app-game-loads>\r\n<app-size-choose\r\n  *ngIf=\"currentMenuId == 2\"\r\n  (openCloseMenu)=\"openCloseMenu($event)\"\r\n  (beginLevel)=\"generateLevel($event)\"\r\n>\r\n</app-size-choose>\r\n<app-finish-window\r\n  [levelFinishedEmitter]=\"levelFinishedEmitter.asObservable()\"\r\n  [finishTime]=\"levelTime\"\r\n  (startNewLevel)=\"startLevel($event)\"\r\n></app-finish-window>\r\n\r\n<div class=\"rotate-device\">\r\n  <span>ROTATE YOUR DEVICE! </span>\r\n  <mat-icon aria-hidden=\"false\" aria-label=\"Example refresh icon\">refresh</mat-icon>\r\n</div>\r\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { GameSaveLoadService } from 'src/app/services/game-save-load.service';\nimport { LoginService } from 'src/app/services/login.service';\n\n@Component({\n  selector: 'app-game-loads',\n  templateUrl: './game-loads.component.html',\n  styleUrls: ['./game-loads.component.scss'],\n})\nexport class GameLoadsComponent implements OnInit {\n  @Output() openCloseMenu = new EventEmitter();\n  @Output() startLevel = new EventEmitter();\n  public gameSaves$: Observable<any>;\n  constructor(\n    private loginService: LoginService,\n    private gameSaveLoadService: GameSaveLoadService\n  ) {}\n  dateFormat = 'MMM d, y, HH:mm:ss';\n  ngOnInit(): void {\n    this.gameSaves$ = this.gameSaveLoadService.getGameSaves(this.loginService.currentUserId);\n  }\n\n  public loadGame(saveId: string) {\n    this.gameSaveLoadService\n      .getGameData(saveId, this.loginService.currentUserId)\n      .pipe(take(1))\n      .subscribe((gameSave) => {\n        this.openCloseMenu.emit(-1);\n        this.startLevel.emit({ preloadData: gameSave });\n      });\n  }\n}\n","<div class=\"modal-background\">\n  <mat-card class=\"modal-itself\">\n    <div class=\"inside-container\">\n      <ng-container *ngIf=\"gameSaves$ | async as gameSaves\">\n        <ng-container *ngIf=\"gameSaves.length; else nothingFound\">\n          <button\n            class=\"modal-button\"\n            mat-raised-button\n            *ngFor=\"let save of gameSaves\"\n            (click)=\"loadGame(save._id)\"\n          >\n            <span>{{ save.timestamp | date: dateFormat }} </span>\n            <span *ngIf=\"save.levelPreload.levelSize as lvlSize\" class=\"lvl-size\"\n              >{{ lvlSize }}x{{ lvlSize }}\n            </span>\n            <span>{{ save.levelTime / 1000 }}s </span>\n          </button>\n        </ng-container>\n        <ng-template #nothingFound>\n          <h2 class=\"modal-text\">No game saves to load</h2>\n        </ng-template>\n      </ng-container>\n    </div>\n  </mat-card>\n</div>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { shareReplay, take } from 'rxjs/operators';\r\nimport { GameSaveLoadService } from 'src/app/services/game-save-load.service';\r\nimport { LoginService } from 'src/app/services/login.service';\r\nimport { createGameSave, startLevel } from '../scripts/draw';\r\n\r\n@Component({\r\n  selector: 'app-menu',\r\n  templateUrl: './menu.component.html',\r\n  styleUrls: ['./menu.component.scss'],\r\n})\r\nexport class MenuComponent implements OnInit {\r\n  @Input() isAuthorizedUser;\r\n  @Output() openCloseMenu = new EventEmitter();\r\n  @Output() startLevel = new EventEmitter();\r\n  constructor(\r\n    private loginService: LoginService,\r\n    private gameSaveLoadService: GameSaveLoadService\r\n  ) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  public logOut(): void {\r\n    this.loginService.logOut();\r\n  }\r\n\r\n  public loadGame() {\r\n    this.openCloseMenu.emit(1);\r\n  }\r\n\r\n  public startLevelNewLevel() {\r\n    this.openCloseMenu.emit(-1);\r\n    this.startLevel.emit(true);\r\n  }\r\n\r\n  public saveGame() {\r\n    this.gameSaveLoadService\r\n      .saveGameData(createGameSave(), this.loginService.currentUserId)\r\n      .pipe(take(1))\r\n      .subscribe(() => {\r\n        this.openCloseMenu.emit(-1);\r\n      });\r\n  }\r\n}\r\n","<div class=\"modal-background\">\n  <mat-card class=\"modal-itself\">\n    <button class=\"modal-button\" mat-raised-button (click)=\"openCloseMenu.emit()\">\n      Back to game\n    </button>\n    <button class=\"modal-button\" mat-raised-button (click)=\"startLevelNewLevel()\">\n      Start new level\n    </button>\n    <button class=\"modal-button\" mat-raised-button (click)=\"loadGame()\" *ngIf=\"isAuthorizedUser\">\n      Load game\n    </button>\n    <button class=\"modal-button\" mat-raised-button (click)=\"saveGame()\" *ngIf=\"isAuthorizedUser\">\n      Save game\n    </button>\n    <button class=\"modal-button\" color=\"warn\" mat-raised-button (click)=\"logOut()\">Log out</button>\n  </mat-card>\n</div>\n","import { BehaviorSubject } from 'rxjs';\r\n\r\nlet canvas: HTMLCanvasElement;\r\nlet canvasPlayWindow: HTMLCanvasElement;\r\nlet ctx: CanvasRenderingContext2D;\r\nlet ctxPlay: CanvasRenderingContext2D;\r\nlet collectRadius = 100;\r\n\r\nlet currentLevel: Level;\r\nlet currentPlayer: Player;\r\nconst defaultMoveVelocity = 31;\r\nconst defaultRotateVelocity = 3.2;\r\nconst textureDim = 64;\r\nconst defaultLevelSize = 40;\r\nconst rayCount = 221;\r\nconst FOV = 70;\r\nconst halfFOV = FOV / 2;\r\nconst mainColor: string = '#000';\r\nconst secondaryColor: string = '#666';\r\nconst thirdColor: string = '#5d7';\r\nconst fourthColor: string = '#a00';\r\nconst playerColor: string = '#1d7';\r\nconst collectableColor: string = '#ff0';\r\nconst canvasWidth: number = 1178;\r\nconst canvasHeight: number = 512;\r\nconst playerEyesVerticalPosition = [-10, 15];\r\nconst playerEyesVerticalChange = [-1.4, 1];\r\nconst fpsLimit = 61;\r\nconst ignoreMask = false;\r\nlet defaultTextureId = 1;\r\nlet textures = new Image();\r\ntextures.src = './assets/images/walls.png';\r\n\r\nlet collectable = new Image();\r\ncollectable.src = './assets/images/key.png';\r\nconst spriteImgs = {\r\n  collectable: collectable,\r\n};\r\nvar sprites = [];\r\nvar zBuffer = [];\r\nclass Sprite {\r\n  public x;\r\n  public y;\r\n  public spriteType;\r\n  public distance;\r\n  public angle;\r\n  public isVisible;\r\n  constructor(x, y, spriteType) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.spriteType = spriteType;\r\n    this.distance = 0;\r\n    this.angle = 0;\r\n    this.isVisible = false;\r\n  }\r\n\r\n  calculateAngle() {\r\n    let dx = this.x - currentPlayer.x;\r\n    let dy = this.y - currentPlayer.y;\r\n    let angleDiff = currentPlayer.rotateAngle - Math.atan2(dy, dx);\r\n    if (angleDiff < -Math.PI) {\r\n      angleDiff += 2 * Math.PI;\r\n    }\r\n    if (angleDiff > Math.PI) {\r\n      angleDiff -= 2 * Math.PI;\r\n    }\r\n    this.angle = angleDiff;\r\n    angleDiff = Math.abs(angleDiff);\r\n    this.isVisible = angleDiff < convertToRadians(halfFOV);\r\n  }\r\n\r\n  calculateDistance() {\r\n    this.distance = calculateDistance(currentPlayer.x, currentPlayer.y, this.x, this.y);\r\n  }\r\n\r\n  updateSprite() {\r\n    this.calculateAngle();\r\n    this.calculateDistance();\r\n  }\r\n\r\n  draw() {\r\n    ctx.fillStyle = collectableColor;\r\n    ctx.fillRect(this.x - 3, this.y - 3, 6, 6);\r\n  }\r\n\r\n  render() {\r\n    this.updateSprite();\r\n\r\n    // ctx.moveTo(this.x, this.y);\r\n    // ctx.lineTo(currentPlayer.x, currentPlayer.y);\r\n    // const tracingFinalPoint = {\r\n    //   x:\r\n    //     currentPlayer.x +\r\n    //     Math.cos(currentPlayer.rotateAngle) * this.distance * Math.cos(this.angle),\r\n    //   y:\r\n    //     currentPlayer.y +\r\n    //     Math.sin(currentPlayer.rotateAngle) * this.distance * Math.cos(this.angle),\r\n    // };\r\n    // ctx.lineTo(tracingFinalPoint.x, tracingFinalPoint.y);\r\n    // ctx.lineTo(this.x, this.y);\r\n    // ctx.strokeStyle = '#0f0';\r\n    // ctx.stroke();\r\n    //(this.distance * Math.cos(this.angle)) / defaultDistance = (Math.sin(this.angle) * this.distance) / x\r\n    // x = defaultDistance * Math.sin(this.angle) * this.distance / (this.distance * Math.cos(this.angle))\r\n\r\n    if (this.isVisible) {\r\n      let defaultWallHeight = currentLevel.tileSize;\r\n      let defaultDistance = canvasHeight / 2 / Math.tan(halfFOV);\r\n      this.distance = this.distance * Math.cos(this.angle); //fisheye fix\r\n      let spriteSize = (defaultWallHeight / this.distance) * defaultDistance;\r\n      let y0 = ((canvasHeight / 2) ^ 0) - ((spriteSize / 2) ^ 0) + currentPlayer.eyesLevel;\r\n\r\n      let x0 = -Math.tan(this.angle) * defaultDistance * 1.7; //it just works\r\n\r\n      let x = canvasWidth / 2 - spriteSize / 2 + x0;\r\n\r\n      let columnWidth = spriteSize / textureDim;\r\n      for (let i = 0; i < textureDim; ++i) {\r\n        for (let j = 0; j < columnWidth; ++j) {\r\n          let x1 = (x + (i - 1) * columnWidth + j) ^ 0;\r\n\r\n          if (zBuffer[(x1 / (canvasWidth / rayCount)) ^ 0] > this.distance) {\r\n            ctxPlay.drawImage(\r\n              spriteImgs[this.spriteType],\r\n              i,\r\n              0,\r\n              1,\r\n              textureDim,\r\n              x1,\r\n              y0,\r\n              1,\r\n              spriteSize\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// function getVector(x1, y1, x2, y2) {\r\n//   return { x: x2 - x1, y: y2 - y1 };\r\n// }\r\n\r\nfunction renderSprites() {\r\n  sprites.sort((s1: Sprite, s2: Sprite) => {\r\n    return s2.distance - s1.distance;\r\n  });\r\n  sprites.forEach((s) => s.render());\r\n  sprites.forEach((s) => s.draw());\r\n}\r\n\r\n// class Enemy {\r\n//   player: Player;\r\n//   level: Level;\r\n//   x: number;\r\n//   y: number;\r\n//   isVisible: boolean;\r\n//   constructor(player: Player, level: Level) {\r\n//     this.player = player;\r\n//     this.level = level;\r\n//     this.isVisible = false;\r\n//     this.x = level.tileSize * 2.5;\r\n//     this.y = level.tileSize * 2.5;\r\n//   }\r\n// }\r\n\r\nfunction normilizeAngle(angle: number) {\r\n  angle = angle % (2 * Math.PI);\r\n\r\n  if (angle < 0) {\r\n    angle += 2 * Math.PI;\r\n  }\r\n\r\n  return angle;\r\n}\r\n\r\nexport function getLevelStats() {\r\n  return { size: currentLevel.tilesCount, time: gameData.time / 1000 };\r\n}\r\n\r\nfunction calculateDistance(x1: number, y1: number, x2: number, y2: number) {\r\n  return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\r\n}\r\n\r\nfunction convertToRadians(angle: number) {\r\n  return angle * (Math.PI / 180);\r\n}\r\n\r\nexport function createGameSave() {\r\n  return {\r\n    playerPreload: currentPlayer.getPlayerData(),\r\n    levelPreload: currentLevel.getLevelData(),\r\n    levelTime: gameData.time,\r\n    tasks: {\r\n      objectives: gameData.objectives,\r\n      sprites: sprites.map((sprite) => {\r\n        return {\r\n          x: sprite.x,\r\n          y: sprite.y,\r\n          spriteType: sprite.spriteType,\r\n        };\r\n      }),\r\n    },\r\n    timestamp: new Date(),\r\n  };\r\n}\r\n// function rescaleCanvas(canvas: HTMLCanvasElement) {\r\n//     canvas.style.width = `${document.body.clientWidth}px`;\r\n//     canvas.style.height = `${document.body.clientHeight}px`;\r\n// }\r\n\r\nclass Ray {\r\n  ctx: CanvasRenderingContext2D;\r\n  level: Level;\r\n  x: number;\r\n  y: number;\r\n  angle: number;\r\n  angleIncrement: number;\r\n  columnIndex: number;\r\n  xIntercept: any;\r\n  yIntercept: any;\r\n  isLookingDown: boolean = false;\r\n  isLookingLeft: boolean = false;\r\n  yStep: number = 0;\r\n  xStep: number = 0;\r\n  wallHitX: number;\r\n  wallHitY: number;\r\n  wallHitXHorizontal: number;\r\n  wallHitYHorizontal: number;\r\n  wallHitYVertical: number;\r\n  wallHitXVertical: number;\r\n  distanceToWall: number;\r\n  playerAngle: any;\r\n  texturePixel: number;\r\n  textureId: number;\r\n  isHittingHorizontal: boolean;\r\n  constructor(\r\n    ctx: CanvasRenderingContext2D,\r\n    level: Level,\r\n    x: number,\r\n    y: number,\r\n    playerRotateAngle: number,\r\n    angleIncrement: number,\r\n    columnIndex: number\r\n  ) {\r\n    this.ctx = ctx;\r\n    this.level = level;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.angle = playerRotateAngle;\r\n    this.angleIncrement = angleIncrement;\r\n    this.columnIndex = columnIndex;\r\n    this.distanceToWall = 0;\r\n    this.wallHitX = 0;\r\n    this.wallHitY = 0;\r\n    this.wallHitXHorizontal = 0;\r\n    this.wallHitYHorizontal = 0;\r\n    this.wallHitXVertical = 0;\r\n    this.wallHitYVertical = 0;\r\n    this.texturePixel = 0;\r\n    this.textureId = 0;\r\n  }\r\n\r\n  public setAngleAndPosition(angle: number, x: number, y: number): void {\r\n    this.playerAngle = angle;\r\n    this.angle = normilizeAngle(angle + this.angleIncrement);\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  public cast(): void {\r\n    this.xIntercept = 0;\r\n    this.yIntercept = 0;\r\n    this.xStep = 0;\r\n    this.yStep = 0;\r\n    this.isLookingDown = false;\r\n    this.isLookingLeft = false;\r\n    this.angle < Math.PI && (this.isLookingDown = true);\r\n    this.angle > Math.PI / 2 && this.angle < (3 * Math.PI) / 2 && (this.isLookingLeft = true);\r\n    let tan = Math.tan(this.angle);\r\n\r\n    let yTemp = this.y / this.level.tileSize;\r\n    this.yIntercept =\r\n      (this.isLookingDown ? Math.ceil(yTemp) : Math.floor(yTemp)) * this.level.tileSize; //tile y coord\r\n    this.xIntercept = this.x + (this.yIntercept - this.y) / tan; //neighbor tile\r\n\r\n    this.yStep = this.isLookingDown ? this.level.tileSize : -this.level.tileSize; //calculating Y step\r\n    this.xStep = this.yStep / tan; //calculating X step according to angle\r\n    let nextXHorizontal = this.xIntercept;\r\n    let nextYHorizontal = this.yIntercept;\r\n    !this.isLookingDown && --nextYHorizontal; //to count tile behind current wall\r\n\r\n    let isCollidingHorizontal = false;\r\n    while (\r\n      !isCollidingHorizontal &&\r\n      nextXHorizontal >= 0 &&\r\n      nextXHorizontal <= canvasWidth &&\r\n      nextYHorizontal >= 0 &&\r\n      nextYHorizontal <= canvasHeight\r\n    ) {\r\n      let xCollision = (nextXHorizontal / this.level.tileSize) ^ 0; //j for level array\r\n      let yCollision = (nextYHorizontal / this.level.tileSize) ^ 0; //i for level array\r\n\r\n      if (\r\n        this.level.isCollision(xCollision, yCollision) ||\r\n        yCollision > this.level.tilesCount - 1\r\n      ) {\r\n        isCollidingHorizontal = true;\r\n        this.wallHitXHorizontal = nextXHorizontal;\r\n        this.wallHitYHorizontal = nextYHorizontal;\r\n      } else {\r\n        nextXHorizontal += this.xStep;\r\n        nextYHorizontal += this.yStep;\r\n      }\r\n    }\r\n\r\n    let tempX = this.x / this.level.tileSize;\r\n    this.xIntercept =\r\n      (this.isLookingLeft ? Math.floor(tempX) : Math.ceil(tempX)) * this.level.tileSize; //tile x coord\r\n    this.yIntercept = this.y + (this.xIntercept - this.x) * tan;\r\n    this.xStep = this.isLookingLeft ? -this.level.tileSize : this.level.tileSize;\r\n    this.yStep = this.xStep * tan;\r\n    let nextXVertical = this.xIntercept;\r\n    let nextYVertical = this.yIntercept;\r\n    this.isLookingLeft && --nextXVertical;\r\n    let isCollidingVertical = false;\r\n\r\n    while (\r\n      !isCollidingVertical &&\r\n      nextXVertical >= 0 &&\r\n      nextXVertical <= canvasWidth &&\r\n      nextYVertical >= 0 &&\r\n      nextYVertical <= canvasHeight\r\n    ) {\r\n      let xCollision = (nextXVertical / this.level.tileSize) ^ 0;\r\n      let yCollision = (nextYVertical / this.level.tileSize) ^ 0;\r\n\r\n      if (\r\n        this.level.isCollision(xCollision, yCollision) ||\r\n        xCollision > this.level.tilesCount - 1\r\n      ) {\r\n        isCollidingVertical = true;\r\n        this.wallHitXVertical = nextXVertical;\r\n        this.wallHitYVertical = nextYVertical;\r\n      } else {\r\n        nextXVertical += this.xStep;\r\n        nextYVertical += this.yStep;\r\n      }\r\n    }\r\n\r\n    // find distance\r\n    let horizontalDist = Number.MAX_VALUE;\r\n    let verticalDist = Number.MAX_VALUE;\r\n\r\n    if (isCollidingHorizontal) {\r\n      horizontalDist = calculateDistance(\r\n        this.x,\r\n        this.y,\r\n        this.wallHitXHorizontal,\r\n        this.wallHitYHorizontal\r\n      );\r\n    }\r\n    if (isCollidingVertical) {\r\n      verticalDist = calculateDistance(\r\n        this.x,\r\n        this.y,\r\n        this.wallHitXVertical,\r\n        this.wallHitYVertical\r\n      );\r\n    }\r\n\r\n    this.isHittingHorizontal = horizontalDist < verticalDist;\r\n    if (this.isHittingHorizontal) {\r\n      this.wallHitX = this.wallHitXHorizontal;\r\n      this.wallHitY = this.wallHitYHorizontal;\r\n      this.distanceToWall = horizontalDist;\r\n      this.texturePixel =\r\n        ((this.wallHitX - ((this.wallHitX / this.level.tileSize) ^ 0) * this.level.tileSize) /\r\n          this.level.tileSize) *\r\n        textureDim;\r\n    } else {\r\n      this.wallHitX = this.wallHitXVertical;\r\n      this.wallHitY = this.wallHitYVertical;\r\n      this.distanceToWall = verticalDist;\r\n      this.texturePixel =\r\n        ((this.wallHitY - ((this.wallHitY / this.level.tileSize) ^ 0) * this.level.tileSize) /\r\n          this.level.tileSize) *\r\n        textureDim;\r\n    }\r\n\r\n    this.level.clearMaskTile(this.wallHitX, this.wallHitY, this.isLookingDown, this.isLookingLeft);\r\n    this.texturePixel = this.texturePixel ^ 0;\r\n    this.textureId = this.level.getTile(this.wallHitX, this.wallHitY) - 1;\r\n    // this.textureId = horizontalDist < verticalDist ? 0 : 1;\r\n  }\r\n\r\n  public renderWall(ctx: CanvasRenderingContext2D, eyesLevel: number): void {\r\n    const defaultWallHeight = this.level.tileSize;\r\n    const defaultDistance = canvasHeight / 2 / Math.tan(halfFOV);\r\n\r\n    this.distanceToWall = this.distanceToWall * Math.cos(this.angle - this.playerAngle); //fisheye fix\r\n    zBuffer[this.columnIndex] = this.distanceToWall;\r\n    let wallHeight = (defaultWallHeight / this.distanceToWall) * defaultDistance;\r\n\r\n    let y0 = ((canvasHeight / 2) ^ 0) - ((wallHeight / 2) ^ 0);\r\n    let y1 = y0 + wallHeight;\r\n\r\n    let imageHeight = y0 - y1;\r\n    ctx.imageSmoothingEnabled = false;\r\n    ctx.drawImage(\r\n      textures,\r\n      this.texturePixel + (this.isHittingHorizontal ? 0 : 64),\r\n      this.textureId * textureDim,\r\n      1,\r\n      textureDim,\r\n      this.columnIndex * (canvasWidth / rayCount),\r\n      y1 + eyesLevel,\r\n      canvasWidth / rayCount,\r\n      imageHeight\r\n    );\r\n    // ctx.fillStyle = `#888`;\r\n    // if(this.textureId) {\r\n    //     ctx.fillStyle = `#aaa`;\r\n    // }\r\n    // ctx.fillRect(\r\n    //     this.columnIndex * (canvasWidth/rayCount),\r\n    //     y1 + eyesLevel,\r\n    //     canvasWidth/rayCount,\r\n    //     imageHeight\r\n    // )\r\n  }\r\n\r\n  public draw(): void {\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(this.x, this.y);\r\n    this.ctx.lineTo(this.wallHitX, this.wallHitY);\r\n    this.ctx.strokeStyle = '#f33';\r\n    this.ctx.stroke();\r\n    this.ctx.closePath();\r\n  }\r\n}\r\n\r\nclass Player {\r\n  ctx: CanvasRenderingContext2D;\r\n  currentLevel: Level;\r\n  x: number;\r\n  y: number;\r\n  moveState: number;\r\n  rotateState: number;\r\n  rotateAngle: number;\r\n  moveVelocity: number;\r\n  rotateVelocity: number;\r\n  rays: Ray[] = [];\r\n  rayCount: number;\r\n  eyesLevel: number;\r\n  doesEyesLevelChangingUp: boolean;\r\n\r\n  constructor(ctx: CanvasRenderingContext2D, currentLevel: Level, playerPreload: any) {\r\n    this.ctx = ctx;\r\n    this.currentLevel = currentLevel;\r\n    // random start\r\n    // this.x = currentLevel.startingPoint.j * currentLevel.tileSize + currentLevel.tileSize/2;\r\n    // this.y = currentLevel.startingPoint.i * currentLevel.tileSize + currentLevel.tileSize/2;\r\n    if (playerPreload) {\r\n      this.x = playerPreload.playerCoords.x;\r\n      this.y = playerPreload.playerCoords.y;\r\n      this.rotateAngle = playerPreload.playerRotateAngle;\r\n    } else {\r\n      this.x = currentLevel.tileSize * 1.5;\r\n      this.y = currentLevel.tileSize * 1.5;\r\n      this.rotateAngle = 0;\r\n    }\r\n\r\n    this.moveState = 0;\r\n    this.rotateState = 0;\r\n    this.eyesLevel = 0;\r\n    this.doesEyesLevelChangingUp = true;\r\n\r\n    this.rayCount = rayCount;\r\n\r\n    let angleIncrementForRays = convertToRadians(FOV / this.rayCount);\r\n    let raysStartAngle = convertToRadians(this.rotateAngle - halfFOV);\r\n\r\n    for (let i = 0; i < this.rayCount; ++i, raysStartAngle += angleIncrementForRays) {\r\n      this.rays[i] = new Ray(\r\n        this.ctx,\r\n        this.currentLevel,\r\n        this.x,\r\n        this.y,\r\n        this.rotateAngle,\r\n        raysStartAngle,\r\n        i\r\n      );\r\n    }\r\n  }\r\n\r\n  public isOnFinish(): boolean {\r\n    return (\r\n      ((this.x / this.currentLevel.tileSize) ^ 0) == this.currentLevel.finishPoint.j &&\r\n      ((this.y / this.currentLevel.tileSize) ^ 0) == this.currentLevel.finishPoint.i\r\n    );\r\n  }\r\n\r\n  public getPlayerData(): {\r\n    playerCoords: {\r\n      x: number;\r\n      y: number;\r\n    };\r\n    playerRotateAngle: number;\r\n  } {\r\n    return {\r\n      playerCoords: {\r\n        x: this.x,\r\n        y: this.y,\r\n      },\r\n      playerRotateAngle: this.rotateAngle,\r\n    };\r\n  }\r\n\r\n  public tick(fps: number): void {\r\n    this.updatePosition(fps);\r\n    this.castRays();\r\n    this.renderRays();\r\n    this.draw();\r\n  }\r\n\r\n  public draw(): void {\r\n    this.ctx.fillStyle = playerColor;\r\n    this.ctx.fillRect(this.x - 3, this.y - 3, 6, 6);\r\n  }\r\n\r\n  public castRays(): void {\r\n    this.rays.forEach((ray) => ray.cast());\r\n    this.rays.forEach((ray) => ray.draw());\r\n  }\r\n\r\n  public renderRays(): void {\r\n    this.rays.forEach((ray) => ray.renderWall(ctxPlay, this.eyesLevel));\r\n  }\r\n\r\n  public forward(): void {\r\n    this.moveState = 1;\r\n  }\r\n\r\n  public back(): void {\r\n    this.moveState = -1;\r\n  }\r\n\r\n  public left(): void {\r\n    this.rotateState = -1;\r\n  }\r\n\r\n  public right(): void {\r\n    this.rotateState = 1;\r\n  }\r\n\r\n  public moveStateZero(): void {\r\n    this.moveState = 0;\r\n  }\r\n\r\n  public rotateStateZero(): void {\r\n    this.rotateState = 0;\r\n  }\r\n\r\n  public updatePosition(fps: number): void {\r\n    this.moveVelocity =\r\n      ((this.currentLevel.tileSize / canvasHeight) * defaultMoveVelocity * fpsLimit) / fps;\r\n    this.rotateVelocity = (((defaultRotateVelocity * Math.PI) / 180) * fpsLimit) / fps;\r\n    gameData.isLevelFinished.next(this.isOnFinish());\r\n    let newX = this.x + this.moveState * Math.cos(this.rotateAngle) * this.moveVelocity;\r\n    let newY = this.y + this.moveState * Math.sin(this.rotateAngle) * this.moveVelocity;\r\n\r\n    if (this.moveState) {\r\n      if (\r\n        this.eyesLevel > -playerEyesVerticalPosition[0] ||\r\n        this.eyesLevel < -playerEyesVerticalPosition[1]\r\n      ) {\r\n        if (this.doesEyesLevelChangingUp) {\r\n          this.eyesLevel = -playerEyesVerticalPosition[1];\r\n        } else {\r\n          this.eyesLevel = -playerEyesVerticalPosition[0];\r\n        }\r\n        this.doesEyesLevelChangingUp = !this.doesEyesLevelChangingUp;\r\n      }\r\n      if (this.doesEyesLevelChangingUp) {\r\n        this.eyesLevel += (playerEyesVerticalChange[0] * fpsLimit) / fps;\r\n      } else {\r\n        this.eyesLevel += (playerEyesVerticalChange[1] * fpsLimit) / fps;\r\n      }\r\n    }\r\n\r\n    !this.isCollision(newX, newY) && ((this.x = newX), (this.y = newY));\r\n    this.checkSpriteCollision(this.x, this.y);\r\n    this.rotateAngle += this.rotateState * this.rotateVelocity;\r\n    this.rotateAngle = normilizeAngle(this.rotateAngle);\r\n\r\n    this.rays.forEach((ray) => ray.setAngleAndPosition(this.rotateAngle, this.x, this.y));\r\n  }\r\n\r\n  public checkSpriteCollision(x: number, y: number): void {\r\n    sprites = sprites.filter(\r\n      (sprite: Sprite) => calculateDistance(x, y, sprite.x, sprite.y) > collectRadius\r\n    );\r\n    gameData.objectives.done = gameData.objectives.count - sprites.length;\r\n    if (sprites.length === 0) {\r\n      currentLevel.clearMapBlock(\r\n        currentLevel.levelArray,\r\n        1,\r\n        currentLevel.finishPoint.i,\r\n        currentLevel.finishPoint.j\r\n      );\r\n    }\r\n  }\r\n\r\n  public isCollision(x: number, y: number): boolean {\r\n    let playerX = (x / this.currentLevel.tileSize) ^ 0;\r\n    let playerY = (y / this.currentLevel.tileSize) ^ 0;\r\n    return this.currentLevel.isCollision(playerX, playerY);\r\n  }\r\n}\r\n\r\nclass Level {\r\n  ctx: CanvasRenderingContext2D;\r\n  levelArray: any;\r\n  tilesCount: any;\r\n  canvasWidth: any;\r\n  canvasHeight: any;\r\n  tileSize: number;\r\n  startingPoint: { i: number; j: number };\r\n  finishPoint: { i: number; j: number };\r\n  mask: number[][];\r\n  spritesArray: number[][];\r\n\r\n  constructor(ctx: CanvasRenderingContext2D, levelSize: number, levelPreload: any) {\r\n    this.ctx = ctx;\r\n    this.startingPoint = {\r\n      i: Math.round(Math.random() * (levelSize - 3)) + 1,\r\n      j: Math.round(Math.random() * (levelSize - 3)) + 1,\r\n    };\r\n    this.canvasWidth = canvas.width;\r\n    this.canvasHeight = canvas.height;\r\n\r\n    if (levelPreload) {\r\n      this.finishPoint = levelPreload.finishPoint;\r\n      [this.levelArray, this.mask] = levelPreload.levelData;\r\n      this.tilesCount = this.levelArray[0].length;\r\n      this.tileSize = (this.canvasWidth / this.tilesCount) ^ 0;\r\n    } else {\r\n      this.finishPoint = {\r\n        i: levelSize - 1,\r\n        j: levelSize - 2,\r\n      };\r\n      this.tilesCount = levelSize;\r\n      this.tileSize = (this.canvasWidth / this.tilesCount) ^ 0;\r\n      [this.levelArray, this.mask] = this.generateLevel(levelSize);\r\n    }\r\n  }\r\n\r\n  public getLevelData(): {\r\n    levelData: [number[][], number[][]];\r\n    finishPoint: { i: number; j: number };\r\n    levelSize: number;\r\n  } {\r\n    return {\r\n      levelData: [this.levelArray, this.mask],\r\n      finishPoint: this.finishPoint,\r\n      levelSize: this.tilesCount,\r\n    };\r\n  }\r\n\r\n  public getTile(x: number, y: number): number {\r\n    const i = (y / this.tileSize) ^ 0,\r\n      j = (x / this.tileSize) ^ 0;\r\n    if (i > this.tilesCount - 1 || j > this.tilesCount - 1) return 5;\r\n    return this.levelArray[i][j];\r\n  }\r\n\r\n  public generateLevel(size: number): [number[][], number[][]] {\r\n    let lvlMap: number[][] = Array(size);\r\n    let mask: number[][];\r\n\r\n    for (let i = 0; i < size; ++i) {\r\n      lvlMap[i] = Array(size).fill(defaultTextureId);\r\n    }\r\n    mask = lvlMap.map((row) => row.slice());\r\n    let lvlStack: { i: number; j: number }[] = [];\r\n\r\n    lvlStack.push({ i: 1, j: 1 });\r\n    let i = this.startingPoint.i,\r\n      j = this.startingPoint.j;\r\n    lvlMap[i][j] = 0;\r\n    while (1) {\r\n      // console.log('Searching neighbours of: ',i,j);\r\n      if (this.isAvailableAnyNeighbour(lvlMap, i, j)) {\r\n        lvlStack.push({ i, j });\r\n        let newI = i,\r\n          newJ = j;\r\n        while (1) {\r\n          newI = i;\r\n          newJ = j;\r\n          switch (Math.round(Math.random() * 4)) {\r\n            case 0:\r\n              newI = i - 1;\r\n              break;\r\n            case 1:\r\n              newJ = j - 1;\r\n              break;\r\n            case 2:\r\n              newI = i + 1;\r\n              break;\r\n            case 3:\r\n              newJ = j + 1;\r\n              break;\r\n          }\r\n          if (\r\n            newI > 0 &&\r\n            newI < size - 1 &&\r\n            newJ > 0 &&\r\n            newJ < size - 1 &&\r\n            lvlMap[newI][newJ] &&\r\n            // lvlMap[newI][newJ] != 0 &&\r\n            !this.doesAnyRadiusNeighbourIsPartOfPath({ i, j }, lvlMap, newI, newJ)\r\n          ) {\r\n            break;\r\n          }\r\n        }\r\n        i = newI;\r\n        j = newJ;\r\n        lvlMap[i][j] = 0;\r\n      } else if (!lvlStack.length) {\r\n        break;\r\n      } else {\r\n        let previous = lvlStack.pop();\r\n        if (previous) {\r\n          i = previous.i;\r\n          j = previous.j;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.clearMapBlock(lvlMap, 2, 1, 1);\r\n    this.clearMapBlock(lvlMap, 2, size - 3, size - 3);\r\n    this.clearMapBlock(lvlMap, 2, 1, size - 3);\r\n    this.clearMapBlock(lvlMap, 2, size - 3, 1);\r\n\r\n    sprites.push(new Sprite(this.tileSize * (size - 1.5), this.tileSize * 1.5, 'collectable'));\r\n    sprites.push(new Sprite(this.tileSize * 1.5, this.tileSize * (size - 1.5), 'collectable'));\r\n    return [lvlMap, mask];\r\n  }\r\n\r\n  public clearMapBlock(lvlArray: number[][], size: number, i: number, j: number): void {\r\n    for (let x = i, xN = size; xN > 0; --xN, ++x) {\r\n      for (let y = j, yN = size; yN > 0; --yN, ++y) {\r\n        lvlArray[x][y] = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  private isAvailableAnyNeighbour(lvlMap: number[][], i: number, j: number): boolean {\r\n    let isHavingSpareNeighbour = false;\r\n    let neighbourI = i,\r\n      neighbourJ = j;\r\n    for (let index = 0; index < 4; ++index) {\r\n      switch (index) {\r\n        case 0:\r\n          neighbourI = i - 1;\r\n          break;\r\n        case 1:\r\n          neighbourJ = j - 1;\r\n          break;\r\n        case 2:\r\n          neighbourI = i + 1;\r\n          break;\r\n        case 3:\r\n          neighbourJ = j + 1;\r\n          break;\r\n      }\r\n\r\n      if (\r\n        neighbourI > 0 &&\r\n        neighbourI < lvlMap.length - 1 &&\r\n        neighbourJ > 0 &&\r\n        neighbourJ < lvlMap.length - 1 &&\r\n        lvlMap[neighbourI][neighbourJ]\r\n      ) {\r\n        isHavingSpareNeighbour = true;\r\n        if (isHavingSpareNeighbour) {\r\n          isHavingSpareNeighbour = !this.doesAnyRadiusNeighbourIsPartOfPath(\r\n            { i, j },\r\n            lvlMap,\r\n            neighbourI,\r\n            neighbourJ\r\n          );\r\n        }\r\n        if (isHavingSpareNeighbour) break;\r\n      }\r\n\r\n      neighbourI = i;\r\n      neighbourJ = j;\r\n    }\r\n\r\n    return isHavingSpareNeighbour;\r\n  }\r\n\r\n  private doesAnyRadiusNeighbourIsPartOfPath(\r\n    exception: { i: number; j: number },\r\n    lvlMap: number[][],\r\n    neighbourI: number,\r\n    neighbourJ: number\r\n  ) {\r\n    // console.log('Subneighbour: ', neighbourI,neighbourJ);\r\n\r\n    let changes = { i: exception.i - neighbourI, j: exception.j - neighbourJ };\r\n    let anyNeighbourIsPath = false;\r\n    let startI = neighbourI,\r\n      endI = neighbourI,\r\n      startJ = neighbourJ,\r\n      endJ = neighbourJ;\r\n\r\n    if (changes.i > 0) {\r\n      startI -= 1;\r\n      startJ -= 1;\r\n      endJ += 1;\r\n    }\r\n\r\n    if (changes.i < 0) {\r\n      endI += 1;\r\n      startJ -= 1;\r\n      endJ += 1;\r\n    }\r\n\r\n    if (changes.j > 0) {\r\n      startJ -= 1;\r\n      startI -= 1;\r\n      endI += 1;\r\n    }\r\n\r\n    if (changes.j < 0) {\r\n      endJ += 1;\r\n      startI -= 1;\r\n      endI += 1;\r\n    }\r\n\r\n    // console.log(`ranges: [i : ${startI}, ${endI} j : ${startJ}, ${endJ}]`);\r\n\r\n    for (let i = startI; i <= endI; ++i) {\r\n      for (let j = startJ; j <= endJ; ++j) {\r\n        // console.log('Checking: ',i,j);\r\n        if (i > 0 && i < lvlMap.length - 1 && j > 0 && j < lvlMap.length - 1 && !lvlMap[i][j]) {\r\n          anyNeighbourIsPath = true;\r\n          // console.log(i, j, ' is 0');\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return anyNeighbourIsPath;\r\n  }\r\n\r\n  public clearMaskTile(hitX: number, hitY: number, down: boolean, left: boolean): void {\r\n    hitY += down ? 1 : -1;\r\n    hitX += left ? -1 : 1;\r\n    const jTileHit = (hitX / this.tileSize) ^ 0,\r\n      iTileHit = (hitY / this.tileSize) ^ 0;\r\n    if (iTileHit > this.tilesCount - 1 || jTileHit > this.tilesCount - 1) return;\r\n    this.mask[iTileHit][jTileHit] = 0;\r\n  }\r\n\r\n  public draw(ignoreMask: boolean = false) {\r\n    for (let i = 0; i < this.tilesCount; ++i) {\r\n      for (let j = 0; j < this.tilesCount; ++j) {\r\n        this.ctx.fillStyle =\r\n          this.levelArray[i][j] && (!this.mask[i][j] || ignoreMask) ? mainColor : secondaryColor;\r\n        this.ctx.fillRect(j * this.tileSize, i * this.tileSize, this.tileSize, this.tileSize);\r\n      }\r\n    }\r\n  }\r\n\r\n  public tick(ignoreMask: boolean = false) {\r\n    this.draw(ignoreMask);\r\n  }\r\n\r\n  public drawFinishPoint() {\r\n    this.ctx.fillStyle = this.levelArray[this.finishPoint.i][this.finishPoint.j]\r\n      ? fourthColor\r\n      : thirdColor;\r\n    this.ctx.fillRect(\r\n      this.finishPoint.j * this.tileSize,\r\n      this.finishPoint.i * this.tileSize,\r\n      this.tileSize,\r\n      this.tileSize\r\n    );\r\n  }\r\n\r\n  public isCollision(x: number, y: number) {\r\n    if (y >= this.levelArray.length) {\r\n      y = this.levelArray.length - 1;\r\n    }\r\n    return !!this.levelArray[y][x];\r\n  }\r\n}\r\n\r\nfunction paintFloorAndCeiling(ctx: CanvasRenderingContext2D) {\r\n  ctx.fillStyle = '#005';\r\n  ctx.fillRect(0, 0, canvasWidth, canvasHeight / 2);\r\n\r\n  ctx.fillStyle = '#222';\r\n  ctx.fillRect(0, canvasHeight / 2, canvasWidth, canvasHeight);\r\n}\r\n\r\nlet gameInterval = {\r\n  interval: 0,\r\n};\r\nlet isGameRunning = false;\r\nlet timeInterval: any;\r\nlet audioObj: any = null;\r\nlet gameTime = 0;\r\n\r\nexport const gameData = {\r\n  fps: 0,\r\n  time: 0,\r\n  isLevelFinished: new BehaviorSubject(false),\r\n  objectives: {\r\n    count: 2,\r\n    done: 0,\r\n  },\r\n};\r\n\r\nlet localFPS = 0;\r\n\r\nfunction animationFrameRepeat(timeSpent) {\r\n  gameInterval.interval = requestAnimationFrame(animationFrameRepeat);\r\n  localFPS = 1000 / (timeSpent - gameTime);\r\n  if (localFPS >= fpsLimit) return;\r\n  gameData.fps = localFPS;\r\n  gameTime = timeSpent;\r\n\r\n  draw(gameData.fps);\r\n}\r\n\r\nexport function startGameInterval() {\r\n  gameInterval.interval = requestAnimationFrame(animationFrameRepeat);\r\n  isGameRunning = true;\r\n}\r\n\r\nexport function clearGameInterval() {\r\n  cancelAnimationFrame(gameInterval.interval);\r\n  isGameRunning = false;\r\n}\r\n\r\nfunction clearTimerInterval() {\r\n  clearInterval(timeInterval);\r\n  gameData.time = 0;\r\n}\r\n\r\nfunction startTimerInterval() {\r\n  timeInterval = setInterval(() => {\r\n    if (isGameRunning) {\r\n      gameData.time += 100;\r\n    }\r\n  }, 100);\r\n}\r\n\r\nexport function startLevel(loadGame: any = null, levelSize: number = null, textureId = 1) {\r\n  gameData.isLevelFinished.next(false);\r\n  // audioObj?.pause();\r\n  // audioObj = null;\r\n  // audioObj = new Audio('./assets/audio/sample.mp4');\r\n  // audioObj.addEventListener(\"canplaythrough\", () => {\r\n  //     audioObj.play();\r\n  // });\r\n  sprites = loadGame\r\n    ? loadGame.tasks.sprites.map((sprite) => new Sprite(sprite.x, sprite.y, sprite.spriteType))\r\n    : [];\r\n  loadGame && (gameData.objectives = loadGame.tasks.objectives);\r\n  defaultTextureId = textureId;\r\n  clearGameInterval();\r\n  clearTimerInterval();\r\n  startTimerInterval();\r\n  canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n  canvasPlayWindow = document.getElementById('canvasPlayWindow') as HTMLCanvasElement;\r\n  ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\r\n  ctxPlay = canvasPlayWindow.getContext('2d') as CanvasRenderingContext2D;\r\n  // body = document.querySelector('body') as HTMLBodyElement;\r\n  // if (body) {\r\n  //   body.style.backgroundColor = secondaryColor;\r\n  // }\r\n  canvas.width = canvasHeight;\r\n  canvas.height = canvasHeight;\r\n\r\n  canvasPlayWindow.width = canvasWidth;\r\n  canvasPlayWindow.height = canvasHeight;\r\n  // rescaleCanvas(canvasPlayWindow);\r\n  loadGame && (gameData.time = loadGame.levelTime);\r\n  currentLevel = new Level(ctx, levelSize || defaultLevelSize, loadGame?.levelPreload);\r\n  currentPlayer = new Player(ctx, currentLevel, loadGame?.playerPreload);\r\n  collectRadius = currentLevel.tileSize / 3;\r\n  startGameInterval();\r\n}\r\n\r\nfunction clearCanvas() {\r\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n  ctxPlay.clearRect(0, 0, canvas.width, canvas.height);\r\n}\r\n\r\nfunction draw(fps: number) {\r\n  clearCanvas();\r\n  paintFloorAndCeiling(ctxPlay);\r\n  currentLevel.tick(ignoreMask);\r\n  currentPlayer.tick(fps);\r\n  currentLevel.drawFinishPoint();\r\n  renderSprites();\r\n}\r\n\r\n// document.addEventListener('DOMContentLoaded', startLevel);\r\n\r\nexport function playerMoveForward() {\r\n  currentPlayer.forward();\r\n}\r\n\r\nexport function playerMoveBack() {\r\n  currentPlayer.back();\r\n}\r\n\r\nexport function playerStopMoving() {\r\n  currentPlayer.moveStateZero();\r\n}\r\n\r\nexport function playerRotateLeft() {\r\n  currentPlayer.left();\r\n}\r\n\r\nexport function playerRotateRight() {\r\n  currentPlayer.right();\r\n}\r\n\r\nexport function playerStopRotating() {\r\n  currentPlayer.rotateStateZero();\r\n}\r\n\r\ndocument.addEventListener('keydown', (event) => {\r\n  switch (event.keyCode) {\r\n    case 37: {\r\n      //left\r\n      currentPlayer.left();\r\n\r\n      break;\r\n    }\r\n    case 39: {\r\n      //right\r\n      currentPlayer.right();\r\n\r\n      break;\r\n    }\r\n    case 38: {\r\n      //forward\r\n      currentPlayer.forward();\r\n\r\n      break;\r\n    }\r\n    case 40: {\r\n      //backward\r\n      currentPlayer.back();\r\n\r\n      break;\r\n    }\r\n    // case 82: {\r\n    //     startLevel();\r\n\r\n    //     break;\r\n    // }\r\n  }\r\n});\r\n\r\ndocument.addEventListener('keyup', (event) => {\r\n  switch (event.keyCode) {\r\n    case 37: {\r\n      //left\r\n      currentPlayer.rotateStateZero();\r\n\r\n      break;\r\n    }\r\n    case 39: {\r\n      //right\r\n      currentPlayer.rotateStateZero();\r\n\r\n      break;\r\n    }\r\n    case 38: {\r\n      //forward\r\n      currentPlayer.moveStateZero();\r\n\r\n      break;\r\n    }\r\n    case 40: {\r\n      //backward\r\n      currentPlayer.moveStateZero();\r\n\r\n      break;\r\n    }\r\n  }\r\n});\r\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { LoginService } from 'src/app/services/login.service';\n\n@Component({\n  selector: 'app-size-choose',\n  templateUrl: './size-choose.component.html',\n  styleUrls: ['./size-choose.component.scss'],\n})\nexport class SizeChooseComponent {\n  @Output() openCloseMenu = new EventEmitter();\n  @Output() beginLevel = new EventEmitter();\n  public activeTextureId: number;\n  public levelSize: number;\n  public textureIds = [1, 3, 4];\n\n  constructor(private loginService: LoginService) {}\n\n  public startLevel() {\n    this.openCloseMenu.emit(-1);\n    this.beginLevel.emit({ size: this.levelSize, textureId: this.activeTextureId });\n  }\n\n  public logOut(): void {\n    this.loginService.logOut();\n  }\n\n  public sizes = [13, 21, 34, 55];\n\n  public setActiveTextureId(textureId: number) {\n    this.activeTextureId = textureId;\n  }\n\n  public getTexturePosition(textureId) {\n    return `0px ${-(textureId - 1) * 64}px`;\n  }\n}\n","<div class=\"modal-background\">\n  <mat-card class=\"modal-itself\">\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Choose level size</mat-label>\n      <mat-select [(ngModel)]=\"levelSize\" required>\n        <mat-option *ngFor=\"let size of sizes\" [value]=\"size\"> {{ size }}x{{ size }} </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-label class=\"title\">Choose level texture *</mat-label>\n\n    <div class=\"texture-choose\">\n      <div\n        *ngFor=\"let textureId of textureIds\"\n        (click)=\"setActiveTextureId(textureId)\"\n        [ngStyle]=\"{\n          'background-position': getTexturePosition(textureId),\n          width: '64px',\n          height: '64px'\n        }\"\n        class=\"texture\"\n        [ngClass]=\"{ highlight: activeTextureId === textureId }\"\n      ></div>\n    </div>\n    <button\n      class=\"modal-button\"\n      mat-raised-button\n      (click)=\"startLevel()\"\n      [disabled]=\"!activeTextureId || !levelSize\"\n    >\n      Start level\n    </button>\n  </mat-card>\n  <button class=\"modal-button log-out\" color=\"warn\" mat-raised-button (click)=\"logOut()\">\n    Log out\n  </button>\n</div>\n","import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n  Router,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { LoginService } from './services/login.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoginCheckGuard implements CanActivate {\n  constructor(private router: Router, private loginService: LoginService) {}\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const isInLoginPage = state.url.includes('login') || state.url.includes('register');\n    if (this.loginService.isLoggedIn()) {\n      if (isInLoginPage) {\n        this.router.navigateByUrl('/game');\n      }\n      return true;\n    } else {\n      if (isInLoginPage) {\n        return true;\n      } else {\n        this.router.navigateByUrl('/login');\n        return false;\n      }\n    }\n  }\n}\n","import { Component, OnChanges, OnInit } from '@angular/core';\nimport { AbstractControl, FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject, merge, throwError } from 'rxjs';\nimport { catchError, filter, take } from 'rxjs/operators';\nimport { LoginService } from '../services/login.service';\n\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.scss'],\n})\nexport class LoginPageComponent implements OnInit {\n  public loginForm = this.fb.group({\n    login: [null, Validators.required],\n    password: [null, [Validators.required, Validators.minLength(8)]],\n    passwordRepeat: [null, Validators.required],\n  });\n  public isOnLoginPage = new BehaviorSubject(null);\n\n  constructor(\n    private loginService: LoginService,\n    private fb: FormBuilder,\n    private router: Router,\n    private activatedRoute: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.isOnLoginPage.next(this.router.url.includes('login'));\n    const passwordRepeatField = this.loginForm.get('passwordRepeat');\n    const passwordField = this.loginForm.get('password');\n    this.activatedRoute.url.subscribe(() => {\n      this.isOnLoginPage.next(this.router.url.includes('login'));\n      const validators = [];\n      !this.isOnLoginPage.value && validators.push(Validators.required);\n      passwordRepeatField.setValidators(validators);\n    });\n    merge(passwordField.valueChanges, passwordRepeatField.valueChanges).subscribe((value) => {\n      if (\n        passwordField.value !== passwordRepeatField.value &&\n        passwordRepeatField.validator({} as AbstractControl).required\n      ) {\n        passwordRepeatField.setErrors({\n          match: \"passwords doesn't match\",\n        });\n      } else {\n        passwordRepeatField.setErrors(null);\n      }\n    });\n  }\n\n  public logInAsGuest(): void {\n    this.loginService.logInAsGuest();\n  }\n\n  public logInAsUser(): void {\n    this.loginService\n      .logIn(this.loginForm.value)\n      .pipe(\n        take(1),\n        catchError((error) => {\n          return throwError(error);\n        })\n      )\n      .subscribe((response) => {\n        if (response.error) {\n          alert(response.error);\n        } else {\n          this.loginService.setUserIdToLocalStorage(response.userId);\n          this.router.navigateByUrl('/game');\n        }\n      });\n  }\n\n  public register(): void {\n    this.loginService\n      .register(this.loginForm.value)\n      .pipe(\n        take(1),\n        catchError((error) => {\n          return throwError(error);\n        })\n      )\n      .subscribe((response) => {\n        if (response.error) {\n          alert(response.error);\n        } else {\n          this.loginService.setUserIdToLocalStorage(response.userId);\n          this.router.navigateByUrl('/game');\n        }\n      });\n  }\n}\n","<div class=\"modal-background\">\r\n  <button mat-raised-button color=\"primary\" (click)=\"logInAsGuest()\" class=\"as-guest\">\r\n    Play as guest\r\n  </button>\r\n  <mat-card class=\"modal-itself\">\r\n    <form [formGroup]=\"loginForm\" class=\"form\">\r\n      <mat-form-field class=\"form-field\" appearance=\"outline\">\r\n        <mat-label>Login</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"login\" placeholder=\"Login\" required />\r\n      </mat-form-field>\r\n      <mat-form-field class=\"form-field\" appearance=\"outline\">\r\n        <mat-label>Password</mat-label>\r\n        <input\r\n          matInput\r\n          type=\"password\"\r\n          formControlName=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n        />\r\n        <mat-error *ngIf=\"loginForm.get('password').errors\"\r\n          >Min length of password is 8 symbols</mat-error\r\n        >\r\n      </mat-form-field>\r\n      <mat-form-field class=\"form-field\" appearance=\"outline\" *ngIf=\"!(isOnLoginPage | async)\">\r\n        <mat-label>Repeat password</mat-label>\r\n        <input\r\n          matInput\r\n          type=\"password\"\r\n          formControlName=\"passwordRepeat\"\r\n          placeholder=\"Repeat password\"\r\n          [required]=\"!(isOnLoginPage | async)\"\r\n        />\r\n        <mat-error *ngIf=\"loginForm.get('passwordRepeat').errors\">{{\r\n          loginForm.get('passwordRepeat').errors['match']\r\n        }}</mat-error>\r\n      </mat-form-field>\r\n    </form>\r\n    <div class=\"login-buttons\">\r\n      <a routerLink=\"/register\" *ngIf=\"isOnLoginPage | async; else alreadyRegistered\"\r\n        >don't have account yet?</a\r\n      >\r\n      <ng-template #alreadyRegistered>\r\n        <a routerLink=\"/login\">already registered?</a>\r\n      </ng-template>\r\n\r\n      <button\r\n        class=\"modal-button sign-in-btn\"\r\n        mat-raised-button\r\n        (click)=\"logInAsUser()\"\r\n        [disabled]=\"!loginForm.valid\"\r\n        *ngIf=\"isOnLoginPage | async; else regButton\"\r\n      >\r\n        Sign in\r\n      </button>\r\n      <ng-template #regButton>\r\n        <button\r\n          class=\"modal-button sign-in-btn\"\r\n          mat-raised-button\r\n          (click)=\"register()\"\r\n          [disabled]=\"!loginForm.valid\"\r\n        >\r\n          Register\r\n        </button>\r\n      </ng-template>\r\n    </div>\r\n  </mat-card>\r\n</div>\r\n","import { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\n@NgModule({\n  declarations: [],\n  exports: [\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n  ],\n})\nexport class MaterialModule {}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { URL } from '../../configuration/apiUrl';\n@Injectable({\n  providedIn: 'root',\n})\nexport class GameSaveLoadService {\n  constructor(private router: Router, private http: HttpClient) {}\n\n  public saveGameData(payload: any, userId: string): Observable<any> {\n    return this.http.post<any>(`${URL}/save-game/${userId}`, payload);\n  }\n\n  public getGameData(saveId: string, userId: string): Observable<any> {\n    return this.http.get<any>(`${URL}/load-game/${saveId}/${userId}`);\n  }\n\n  public getGameSaves(userId: string): Observable<any> {\n    return this.http.get<any>(`${URL}/game-saves/${userId}`);\n  }\n\n  public saveLevelFinishStats(\n    { time, size }: { time: number; size: number },\n    userId: string\n  ): Observable<any> {\n    return this.http.post<any>(`${URL}/level-stats/`, { time, size, userId });\n  }\n\n  public getLevelTableStats(size: number): Observable<any> {\n    return this.http.get<any>(`${URL}/level-stats/${size}`);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { from, Observable } from 'rxjs';\nimport { URL } from '../../configuration/apiUrl';\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoginService {\n  constructor(private router: Router, private http: HttpClient) {}\n  public isLoggedIn(): boolean {\n    return !!localStorage.getItem('userId');\n  }\n\n  public logInAsGuest(): void {\n    this.setUserIdToLocalStorage('guest');\n    this.router.navigateByUrl('/game');\n  }\n\n  public setUserIdToLocalStorage(userId: string): void {\n    localStorage.setItem('userId', userId);\n  }\n\n  public logIn({ login, password }: { login: string; password: string }): Observable<any> {\n    return this.http.post<any>(`${URL}/login`, { login, password });\n  }\n\n  public register({ login, password }: { login: string; password: string }): Observable<any> {\n    return this.http.post<any>(`${URL}/register`, { login, password });\n  }\n\n  public isAuthorized(): Observable<any> {\n    return this.http.get<any>(`${URL}/user-exists/${localStorage.getItem('userId')}`);\n  }\n\n  public logOut(): void {\n    localStorage.removeItem('userId');\n    this.router.navigateByUrl('/login');\n  }\n\n  public get currentUserId(): string {\n    return localStorage.getItem('userId');\n  }\n}\n","export const URL = 'https://raycast.herokuapp.com/api';\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}